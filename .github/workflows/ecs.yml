name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}                     # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{secrets.ECR_REPO}}                     # set this to your Amazon ECR repository name
  ECS_SERVICE: ${{secrets.ECR_SERVICE}}                     # set this to your Amazon ECS service name
  ECS_CLUSTER: ${{secrets.ECR_CLUSTER}}                     # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition-template.json   # set this to the path to your Amazon ECS task definition
                                                            # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: ${{secrets.ECR_CONTAINER}}                # set this to the name of the container in the
                                                            # containerDefinitions section of your task definition
  TASK_FAMILY: ${{ secrets.TASK_FAMILY }}
  TASK_ROLE: ${{ secrets.TASK_ROLE }}
  EXECUTION_ROLE: ${{ secrets.EXECUTION_ROLE }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm ci

      - name: Create .env File
        env:
          PREFIX: 'NEXT_PUBLIC_'
          SECRETS: ${{ toJson(secrets) }}
        run: |
          touch .env && \
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' <<< "$SECRETS" | grep $PREFIX > .env

      - name: Build
        run: npm run build

      - name: Collect Code
        run: |
          mkdir -p build/.next && \
          cp -r .next/standalone/. build/. && \
          cp -r public build && \
          cp -r .next/static build/.next

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Replace placeholders in Task Definition template
        id: render-task-def
        run: |
          cp $ECS_TASK_DEFINITION task-definition.json
          sed -i "s|<AWS_ACCOUNT_ID>|${AWS_ACCOUNT_ID}|g" task-definition.json
          sed -i "s|<TASK_ROLE>|${TASK_ROLE}|g" task-definition.json
          sed -i "s|<EXECUTION_ROLE>|${EXECUTION_ROLE}|g" task-definition.json
          sed -i "s|<ECR_REPO>|${ECR_REPOSITORY}|g" task-definition.json
          sed -i "s|<TASK_FAMILY>|${TASK_FAMILY}|g" task-definition.json
          sed -i "s|<CONTAINER_NAME>|${CONTAINER_NAME}|g" task-definition.json
          sed -i "s|<TAG>|${GITHUB_SHA}|g" task-definition.json
          sed -i "s|<AWS_REGION>|${AWS_REGION}|g" task-definition.json
  
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
  
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
